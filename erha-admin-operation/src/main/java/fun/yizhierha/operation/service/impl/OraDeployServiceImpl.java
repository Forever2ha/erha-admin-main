package fun.yizhierha.operation.service.impl;

import cn.hutool.core.date.DatePattern;
import cn.hutool.core.date.DateUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import fun.yizhierha.common.base.BaseErrDto;
import fun.yizhierha.common.exception.BadRequestException;
import fun.yizhierha.common.utils.PageUtils;
import fun.yizhierha.common.utils.Query;
import fun.yizhierha.common.utils.SecurityUtils;
import fun.yizhierha.common.utils.ValidList;
import fun.yizhierha.common.utils.file.ExcelUtils;
import fun.yizhierha.common.utils.file.FileUtil;
import fun.yizhierha.operation.domain.*;
import fun.yizhierha.operation.domain.vo.CreateOraDeployVo;
import fun.yizhierha.operation.domain.vo.UpdateOraDeployVo;
import fun.yizhierha.operation.domain.vo.RetrieveOraDeployVo;
import fun.yizhierha.operation.mapper.OraDeployMapper;
import fun.yizhierha.operation.service.OraDeployHistoryService;
import fun.yizhierha.operation.service.OraDeployServerService;
import fun.yizhierha.operation.service.OraServerService;
import fun.yizhierha.operation.service.mapstruct.OraDeployMapstruct;
import fun.yizhierha.operation.service.OraDeployService;
import fun.yizhierha.operation.util.ExecuteShellUtil;
import fun.yizhierha.operation.util.ScpClientUtil;
import fun.yizhierha.operation.websocket.MsgType;
import fun.yizhierha.operation.websocket.SocketMsg;
import fun.yizhierha.operation.websocket.WebSocketServer;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.*;
import javax.servlet.http.HttpServletResponse;

/**
 * generated by EH-Admin
 *
 * @author xaopohi
 * @date Wed Dec 21 15:42:52 CST 2022
 **/
@Slf4j
@Service
@RequiredArgsConstructor
public class OraDeployServiceImpl extends ServiceImpl<OraDeployMapper, OraDeploy> implements OraDeployService {

    private final OraDeployMapstruct oraDeployMapstruct;
    private final OraServerService serverDeployService;
    private final OraDeployServerService oraDeployServerService;
    private final OraDeployHistoryService oraDeployHistoryService;
    private final Integer count = 30;

    @Override
    public PageUtils<OraDeploy> list(RetrieveOraDeployVo retrieveOraDeployVo, Query.PageVo pageVo) {
        QueryWrapper<OraDeploy> wrapper = new QueryWrapper<>();
        Long appId = retrieveOraDeployVo.getAppId();
        Long projectId = retrieveOraDeployVo.getProjectId();
        Long serverId = retrieveOraDeployVo.getServerId();

        if (appId != null) {
            wrapper.like(OraDeploy.COL_APP_ID, appId);
        }
//        if (projectId != null){
//            wrapper.eq(OraDeploy.COL_PROJECT_ID,projectId);
//        }
//        if (serverId != null){
//            wrapper.eq(OraDeploy.COL_SERVER_ID,serverId);
//        }


        IPage<OraDeploy> iPage = baseMapper.selectPage(new Query<OraDeploy>().getPage(pageVo), wrapper);
        return new PageUtils<>(iPage);
    }

    @Override
    public synchronized void save(CreateOraDeployVo createOraDeployVo) {
        // 1.字段为UNI，需要不重复
        UserDetails currentUser = SecurityUtils.getCurrentUser();
        createOraDeployVo.setCreateBy(currentUser.getUsername());
        // 2.映射数据
        OraDeploy oraDeploy = oraDeployMapstruct.toOraDeploy(createOraDeployVo);
        oraDeploy.setCreateTime(new Timestamp(new Date().getTime()));

        // 3.保存
        this.save(oraDeploy);
        QueryWrapper<OraDeploy> wrapper = new QueryWrapper<>();
        Long appId = createOraDeployVo.getAppId();

        if (appId != null) {
            wrapper.like(OraDeploy.COL_APP_ID, appId);
        }
        wrapper.orderBy(true, false, "create_time");
        OraDeploy one = this.getOne(wrapper);
        List<OraDeployServer> saves = new ArrayList<>();
        for (int i = 0; i < createOraDeployVo.getServerId().size(); i++) {
            OraDeployServer oraDeployServer = new OraDeployServer();
            oraDeployServer.setDeployId(one.getId());
            oraDeployServer.setProjectId(createOraDeployVo.getProjectId());
            oraDeployServer.setServerId(createOraDeployVo.getServerId().get(i));
            saves.add(oraDeployServer);
        }

        oraDeployServerService.save(saves);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public synchronized void edit(ValidList<UpdateOraDeployVo> updateOraDeployVoList, List<BaseErrDto> errDtoList, List<UpdateOraDeployVo> updatebeforOraDeployList) {
        List<OraDeploy> toUpdateOraDeployList = new ArrayList<>();
        List<OraDeployServer> saveserver = new ArrayList<>();
        for (UpdateOraDeployVo updateOraDeployVo : updateOraDeployVoList) {
            Long id = updateOraDeployVo.getId();
            // 1.字段为UNI，需要不重复
            UserDetails currentUser = SecurityUtils.getCurrentUser();
            updateOraDeployVo.setUpdateBy(currentUser.getUsername());
            OraDeploy oraDeploy = oraDeployMapstruct.toOraDeploy(updateOraDeployVo);
            oraDeploy.setUpdateTime(new Timestamp(new Date().getTime()));
            toUpdateOraDeployList.add(oraDeploy);

            for (int i = 0; i < updateOraDeployVo.getServerId().size(); i++) {
                OraDeployServer oraDeployServer = new OraDeployServer();
                oraDeployServer.setDeployId(id);
                oraDeployServer.setProjectId(updateOraDeployVo.getProjectId());
                oraDeployServer.setServerId(updateOraDeployVo.getServerId().get(i));
                saveserver.add(oraDeployServer);
            }

        }
        List<OraDeployServer> savesbeforerver = new ArrayList<>();
        for (UpdateOraDeployVo updateOraDeployVo : updateOraDeployVoList) {
            for (int i = 0; i < updateOraDeployVo.getServerId().size(); i++) {
                OraDeployServer oraDeployServer = new OraDeployServer();
                oraDeployServer.setDeployId(updateOraDeployVo.getId());
                oraDeployServer.setProjectId(updateOraDeployVo.getProjectId());
                oraDeployServer.setServerId(updateOraDeployVo.getServerId().get(i));
                savesbeforerver.add(oraDeployServer);
            }
        }

        // 2.更新
        this.updateBatchById(toUpdateOraDeployList);
        oraDeployServerService.edit(savesbeforerver, saveserver);
    }

    @Override
    public void remove(Set<Long> ids) {
        this.removeByIds(ids);
    }

    @Override
    public void download(HttpServletResponse response) {
        ExcelUtils.export(response, "部署管理信息表", this.list(), OraDeploy.class);
    }

    @Override
    public void deploy(String dir, Long id, Long projectid) {
        deployApp(dir, id, projectid);
    }

    private void deployApp(String dir, Long id, Long projectid) {
        OraDeploy deploy = this.getById(id);
        if (deploy == null) {
            sendMsg("部署信息不存在", MsgType.ERROR);
            throw new BadRequestException("部署信息不存在");
        }
        // TODO: 2023/1/6  更新方法实体类 待写
        OraApp app = deploy.getApp();//deploy.getAppId();
        if (app == null) {
            sendMsg("包对应应用信息不存在", MsgType.ERROR);
            throw new BadRequestException("包对应应用信息不存在");
        }
        int port = app.getPort();
        //这个是服务器部署路径
        String uploadPath = app.getUploadPath();
        StringBuilder sb = new StringBuilder();
        String msg;
        // TODO: 2023/1/6  更新方法实体类 待写
        List<OraServer> deploys = deploy.getServer();//deploy.getServers();
        for (OraServer deployDTO : deploys) {
            String ip = deployDTO.getIp();
            ExecuteShellUtil executeShellUtil = getExecuteShellUtil(ip);
            //判断是否第一次部署
            boolean flag = checkFile(executeShellUtil, app);
            //第一步要确认服务器上有这个目录
            executeShellUtil.execute("mkdir -p " + app.getUploadPath());
            executeShellUtil.execute("mkdir -p " + app.getBackupPath());
            executeShellUtil.execute("mkdir -p " + app.getDeployPath());
            //上传文件
            msg = String.format("登陆到服务器:%s", ip);
            ScpClientUtil scpClientUtil = getScpClientUtil(ip);
            log.info(msg);
            sendMsg(msg, MsgType.INFO);
            msg = String.format("上传文件到服务器:%s<br>目录:%s下，请稍等...", ip, uploadPath);
            sendMsg(msg, MsgType.INFO);
            scpClientUtil.putFile(dir, uploadPath);
            if (flag) {
                sendMsg("停止原来应用", MsgType.INFO);
                //停止应用
                stopApp(port, executeShellUtil);
                sendMsg("备份原来应用", MsgType.INFO);
                //备份应用
                backupApp(executeShellUtil, ip, app.getDeployPath() + FileUtil.FILE_SEPARATOR, app.getName(), app.getBackupPath() + FileUtil.FILE_SEPARATOR, id, projectid);
            }
            sendMsg("部署应用", MsgType.INFO);
            //部署文件,并启动应用
            String deployScript = app.getDeployScript();
            executeShellUtil.executeServer(deployScript);
            sleep(3);
            sendMsg("应用部署中，请耐心等待部署结果，或者稍后手动查看部署状态", MsgType.INFO);
            int i = 0;
            boolean result = false;
            // 由于启动应用需要时间，所以需要循环获取状态，如果超过30次，则认为是启动失败
            while (i++ < count) {
                result = checkIsRunningStatus(port, executeShellUtil);
                if (result) {
                    break;
                }
                // 休眠6秒
                sleep(6);
            }
            sb.append("服务器:").append(deployDTO.getName()).append("<br>应用:").append(app.getName());
            sendResultMsg(result, sb);
            executeShellUtil.close();
            File file = new File(dir);
            FileUtil.rename(file, (DateUtil.date() + file.getName()).toString(), true);
        }
    }

    private void sendResultMsg(boolean result, StringBuilder sb) {
        if (result) {
            sb.append("<br>启动成功!");
            sendMsg(sb.toString(), MsgType.INFO);
        } else {
            sb.append("<br>启动失败!");
            sendMsg(sb.toString(), MsgType.ERROR);
        }
    }

    private boolean checkIsRunningStatus(int port, ExecuteShellUtil executeShellUtil) {
        String result = executeShellUtil.executeForResult(String.format("fuser -n tcp %d", port));
        return result.indexOf("/tcp:") > 0;
    }

    private void sleep(int second) {
        try {
            Thread.sleep(second * 1000);
        } catch (InterruptedException e) {
            log.error(e.getMessage(), e);
        }
    }

    private void backupApp(ExecuteShellUtil executeShellUtil, String ip, String fileSavePath, String appName, String backupPath, Long id, Long projectid) {
        String deployDate = DateUtil.format(new Date(), DatePattern.PURE_DATETIME_PATTERN);
        StringBuilder sb = new StringBuilder();
        backupPath += appName + FileUtil.FILE_SEPARATOR + deployDate + "\n";
        sb.append("mkdir -p ").append(backupPath);
        sb.append("mv -f ").append(fileSavePath);
        sb.append(appName).append(" ").append(backupPath);
        log.info("备份应用脚本:" + sb.toString());
        executeShellUtil.execute(sb.toString());
        //还原信息入库
        OraDeployHistory deployHistory = new OraDeployHistory();
        deployHistory.setAppName(appName);
        deployHistory.setDeployUser(SecurityUtils.getCurrentUsername());
        deployHistory.setIp(ip);
        deployHistory.setDeployId(id);
        deployHistory.setDeployDate(DateUtil.date().toTimestamp());
        deployHistory.setProjectId(projectid);
        oraDeployHistoryService.save(deployHistory);
    }

    /**
     * 停止应用程序
     *
     * @param port             端口
     * @param executeShellUtil 执行shell跑龙套
     */
    private void stopApp(int port, ExecuteShellUtil executeShellUtil) {
        //发送停止命令
        executeShellUtil.execute(String.format("lsof -i :%d|grep -v \"PID\"|awk '{print \"kill -9\",$2}'|sh", port));

    }

    private ScpClientUtil getScpClientUtil(String ip) {
        OraServer serverDeployDTO = serverDeployService.findByIp(ip);
        if (serverDeployDTO == null) {
            sendMsg("IP对应服务器信息不存在：" + ip, MsgType.ERROR);
            throw new BadRequestException("IP对应服务器信息不存在：" + ip);
        }
        return ScpClientUtil.getInstance(ip, serverDeployDTO.getPort(), serverDeployDTO.getAccount(), serverDeployDTO.getPassword());
    }

    private boolean checkFile(ExecuteShellUtil executeShellUtil, OraApp appDTO) {
        String result = executeShellUtil.executeForResult("find " + appDTO.getDeployPath() + " -name " + appDTO.getName());
        return result.indexOf(appDTO.getName()) > 0;
    }

    private ExecuteShellUtil getExecuteShellUtil(String ip) {
        OraServer serverDeployDTO = serverDeployService.findByIp(ip);
        if (serverDeployDTO == null) {
            sendMsg("IP对应服务器信息不存在：" + ip, MsgType.ERROR);
            throw new BadRequestException("IP对应服务器信息不存在：" + ip);
        }
        return new ExecuteShellUtil(ip, serverDeployDTO.getAccount(), serverDeployDTO.getPassword(), serverDeployDTO.getPort());
    }

    private void sendMsg(String msg, MsgType msgType) {
        try {
            WebSocketServer.sendInfo(new SocketMsg(msg, msgType), "deploy");
        } catch (IOException e) {
            log.error(e.getMessage(), e);
        }
    }

    @Override
    public String serverReduction(OraDeployHistory resources) {
        return null;
    }

    @Override
    public String serverStatus(OraDeploy resources) {
        return null;
    }

    @Override
    public String startServer(OraDeploy resources) {
        return null;
    }

    @Override
    public String stopServer(OraDeploy resources) {
        return null;
    }

}