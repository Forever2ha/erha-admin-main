package fun.yizhierha.operation.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import fun.yizhierha.common.base.BaseErrDto;
import fun.yizhierha.common.exception.BadRequestException;
import fun.yizhierha.common.exception.BizCodeEnum;
import fun.yizhierha.common.utils.PageUtils;
import fun.yizhierha.common.utils.Query;
import fun.yizhierha.common.utils.SecurityUtils;
import fun.yizhierha.common.utils.ValidList;
import fun.yizhierha.common.utils.file.ExcelUtils;
import fun.yizhierha.operation.domain.OraDeploy;
import fun.yizhierha.operation.domain.vo.CreateOraDeployVo;
import fun.yizhierha.operation.domain.vo.UpdateOraDeployVo;
import fun.yizhierha.operation.domain.vo.RetrieveOraDeployVo;
import fun.yizhierha.operation.mapper.OraDeployMapper;
import fun.yizhierha.operation.service.mapstruct.OraDeployMapstruct;
import fun.yizhierha.operation.service.OraDeployService;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Timestamp;
import java.util.*;
import javax.servlet.http.HttpServletResponse;

/** generated by EH-Admin
* @author xaopohi
* @date Wed Dec 21 15:42:52 CST 2022
**/
@Service
@RequiredArgsConstructor
public class OraDeployServiceImpl extends ServiceImpl<OraDeployMapper, OraDeploy> implements OraDeployService{

    private final OraDeployMapstruct oraDeployMapstruct;

    @Override
    public PageUtils<OraDeploy> list(RetrieveOraDeployVo retrieveOraDeployVo, Query.PageVo pageVo) {
        QueryWrapper<OraDeploy> wrapper = new QueryWrapper<>();
        Long appId = retrieveOraDeployVo.getAppId();
        Long projectId = retrieveOraDeployVo.getProjectId();
        Long serverId = retrieveOraDeployVo.getServerId();

        if (appId != null){
            wrapper.like(OraDeploy.COL_APP_ID,appId);
        }
        if (projectId != null){
            wrapper.eq(OraDeploy.COL_PROJECT_ID,projectId);
        }
        if (serverId != null){
            wrapper.eq(OraDeploy.COL_SERVER_ID,serverId);
        }


        IPage<OraDeploy> iPage = baseMapper.selectPage(new Query<OraDeploy>().getPage(pageVo), wrapper);
        return new PageUtils<>(iPage);
    }

    @Override
    public synchronized void save(CreateOraDeployVo createOraDeployVo) {
        // 1.字段为UNI，需要不重复
        UserDetails currentUser = SecurityUtils.getCurrentUser();
        createOraDeployVo.setCreateBy(currentUser.getUsername());
        // 2.映射数据
        OraDeploy oraDeploy = oraDeployMapstruct.toOraDeploy(createOraDeployVo);
        oraDeploy.setCreateTime(new Timestamp(new Date().getTime()));
        // 3.保存    
        this.save(oraDeploy);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public synchronized void edit(ValidList<UpdateOraDeployVo> updateOraDeployVoList, List<BaseErrDto> errDtoList) {
        List<OraDeploy> toUpdateOraDeployList = new ArrayList<>();

        for (UpdateOraDeployVo updateOraDeployVo : updateOraDeployVoList) {
            Long id = updateOraDeployVo.getId();
            // 1.字段为UNI，需要不重复
            UserDetails currentUser = SecurityUtils.getCurrentUser();
            updateOraDeployVo.setUpdateBy(currentUser.getUsername());
            OraDeploy oraDeploy = oraDeployMapstruct.toOraDeploy(updateOraDeployVo);
            oraDeploy.setUpdateTime(new Timestamp(new Date().getTime()));

            toUpdateOraDeployList.add(oraDeploy);
        }

        // 2.更新
        this.updateBatchById(toUpdateOraDeployList);
    }

    @Override
    public void remove(Set<Long> ids) {
        this.removeByIds(ids);
    }

    @Override
    public void download(HttpServletResponse response) {
        ExcelUtils.export(response,"部署管理信息表",this.list(), OraDeploy.class);
    }

}