package fun.yizhierha.test.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import fun.yizhierha.common.base.BaseErrDto;
import fun.yizhierha.common.exception.BadRequestException;
import fun.yizhierha.common.exception.BizCodeEnum;
import fun.yizhierha.common.utils.PageUtils;
import fun.yizhierha.common.utils.Query;
import fun.yizhierha.common.utils.ValidList;
import fun.yizhierha.common.utils.file.ExcelUtils;
import fun.yizhierha.common.utils.ArrayUtils;
import fun.yizhierha.test.domain.TestStudent;
import fun.yizhierha.test.domain.vo.CreateTestStudentVo;
import fun.yizhierha.test.domain.vo.UpdateTestStudentVo;
import fun.yizhierha.test.domain.vo.RetrieveTestStudentVo;
import fun.yizhierha.test.mapper.TestStudentMapper;
import fun.yizhierha.test.service.mapstruct.TestStudentMapstruct;
import fun.yizhierha.test.service.TestStudentService;
import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.*;
import javax.servlet.http.HttpServletResponse;

/** generated by EH-Admin
 * @author 二哈
 * @date Wed Nov 30 16:43:58 CST 2022
 **/
@Service
@RequiredArgsConstructor
public class TestStudentServiceImpl extends ServiceImpl<TestStudentMapper, TestStudent> implements TestStudentService{

    private final TestStudentMapstruct testStudentMapstruct;

    @Override
    public PageUtils<TestStudent> list(RetrieveTestStudentVo retrieveTestStudentVo, Query.PageVo pageVo) {
        QueryWrapper<TestStudent> wrapper = new QueryWrapper<>();
        String name = retrieveTestStudentVo.getName();
        String[] likeFood = retrieveTestStudentVo.getLikeFood();
        String clazzName = retrieveTestStudentVo.getClazzName();
        Boolean gender = retrieveTestStudentVo.getGender();
        Timestamp updateTime = retrieveTestStudentVo.getUpdateTime();
        Timestamp expireTime = retrieveTestStudentVo.getExpireTime();
        BigDecimal startAvgScore = retrieveTestStudentVo.getStartAvgScore();
        BigDecimal endAvgScore = retrieveTestStudentVo.getEndAvgScore();

        if (name != null){
            wrapper.like(TestStudent.COL_NAME,name);


        }
        if (likeFood != null){
            for (String s : likeFood) {
                wrapper.like(TestStudent.COL_LIKE_FOOD,s);
            }


        }
        if (clazzName != null){
            wrapper.eq(TestStudent.COL_CLAZZ_NAME,clazzName);
        }
        if (gender != null){
            wrapper.eq(TestStudent.COL_GENDER,gender);
        }
        if (updateTime != null){
            wrapper.isNotNull(TestStudent.COL_UPDATE_TIME);
        }
        if (expireTime != null){
            wrapper.ge(TestStudent.COL_EXPIRE_TIME,expireTime);
        }

        if (startAvgScore != null && endAvgScore != null){
            wrapper.between(TestStudent.COL_AVG_SCORE,startAvgScore,endAvgScore);
        }

        IPage<TestStudent> iPage = baseMapper.selectPage(new Query<TestStudent>().getPage(pageVo), wrapper);
        return new PageUtils<>(iPage);
    }

    @Override
    public synchronized void save(CreateTestStudentVo createTestStudentVo) {
        // 1.字段为UNI，需要不重复
        if (this.getOne(new QueryWrapper<TestStudent>()
                .eq(TestStudent.COL_NAME,createTestStudentVo.getName()))
                != null) {
            throw new BadRequestException(BizCodeEnum.Client_Error_CRUD.getCode(), "学生姓名重复！");
        }
        // 2.映射数据
        TestStudent testStudent = testStudentMapstruct.toTestStudent(createTestStudentVo);
        testStudent.setCreateTime(new Timestamp(new Date().getTime()));
        // 3.保存
        this.save(testStudent);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public synchronized void edit(ValidList<UpdateTestStudentVo> updateTestStudentVoList, List<BaseErrDto> errDtoList) {
        List<TestStudent> toUpdateTestStudentList = new ArrayList<>();

        for (UpdateTestStudentVo updateTestStudentVo : updateTestStudentVoList) {
            Long id = updateTestStudentVo.getId();
            // 1.字段为UNI，需要不重复
            if (this.getOne(new QueryWrapper<TestStudent>()
                    .eq(TestStudent.COL_NAME,updateTestStudentVo.getName()))
                    != null) {
                BaseErrDto baseErrDto = new BaseErrDto();
                baseErrDto.setId(id);
                baseErrDto.setErrorMsg("学生姓名重复");
                baseErrDto.setErrorField(TestStudent.COL_NAME);
                baseErrDto.setErrorVal(updateTestStudentVo.getName());
                errDtoList.add(baseErrDto);
                continue;
            }

            TestStudent testStudent = testStudentMapstruct.toTestStudent(updateTestStudentVo);
            testStudent.setUpdateTime(new Timestamp(new Date().getTime()));

            toUpdateTestStudentList.add(testStudent);
        }

        // 2.更新
        this.updateBatchById(toUpdateTestStudentList);
    }

    @Override
    public void remove(Set<Long> ids) {
        this.removeByIds(ids);
    }

    @Override
    public void download(HttpServletResponse response) {
        ExcelUtils.export(response,"学生信息表",this.list(), TestStudent.class);
    }

}